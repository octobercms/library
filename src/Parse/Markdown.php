<?php namespace October\Rain\Parse;

use Event;
use October\Rain\Parse\Parsedown\Parsedown;

/**
 * Markdown helper class.
 *
 * Calling Markdown::parse($text) returns the HTML corresponding
 * to the Markdown input in $text.
 *
 * OctoberCMS uses ParsedownExtra as its Markdown parser,
 * but fires markdown.beforeParse and markdown.parse events
 * allowing hooks into the default parsing,
 *
 * The markdown.beforeParse event passes a MarkdownData
 * instance, containing a public $text variable. Event
 * listeners can modify $text, for example to filter out
 * or protect snippets from being interpreted by ParseDown.
 *
 * Similarly, markdown.parse is fired after ParseDown has
 * interpreted the (possibly modified) input. This event
 * passes an array [$text, $data], where $text is the
 * original unmodified Markdown input, and $data is the HTML
 * code generated by ParseDown.
 *
 * @package october\parse
 * @author Alexey Bobkov, Samuel Georges
 **/
class Markdown
{
    use \October\Rain\Support\Traits\Emitter;

    /**
     * @var October\Rain\Parse\Parsedown\Parsedown Parsedown instance
     */
    protected $parser;

    /**
     * Parse text using Markdown and Markdown-Extra
     * @param  string $text Markdown text to parse
     * @return string       Resulting HTML
     */
    public function parse($text)
    {
        return $this->parseInternal($text);
    }

    /**
     * Disables code blocks caused by indentation.
     * @param  string $text Markdown text to parse
     * @return string       Resulting HTML
     */
    public function parseSafe($text)
    {
        $this->getParser()->setUnmarkedBlockTypes([]);

        $result = $this->parse($text);

        $this->parser = null;

        return $result;
    }

    /**
     * Parse a single line
     * @param  string $text Markdown text to parse
     * @return string       Resulting HTML
     */
    public function parseLine($text)
    {
        return $this->parseInternal($text, 'line');
    }

    /**
     * Internal method for parsing
     */
    protected function parseInternal($text, $method = 'text')
    {
        $data = new MarkdownData($text);

        $this->fireEvent('beforeParse', $data, false);
        Event::fire('markdown.beforeParse', $data, false);

        $result = $data->text;

        $result = $this->getParser()->$method($result);

        $data->text = $result;

        // The markdown.parse gets passed both the original
        // input and the result so far.
        $this->fireEvent('parse', [$text, $data], false);
        Event::fire('markdown.parse', [$text, $data], false);

        // Strip out certain HTML elements (eg. <script> or <style>)
        $data->text = $this->sanitizeHtml($data->text);

        return $data->text;
    }

    /**
     * Strips tags from Markdown text.
     *
     * This function strips tags from Markdown-parsed text except for a list of whitelisted tags.
     *
     * @param string $text
     * @return void
     */
    protected function sanitizeHtml(string $text): string
    {
        $validTags = [
            'address',
            'article',
            'aside',
            'base',
            'basefont',
            'blockquote',
            'body',
            'caption',
            'center',
            'col',
            'colgroup',
            'dd',
            'details',
            'dialog',
            'dir',
            'div',
            'dl',
            'dt',
            'fieldset',
            'figcaption',
            'figure',
            'footer',
            'form',
            'frame',
            'frameset',
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'h6',
            'head',
            'header',
            'hr',
            'html',
            'iframe',
            'legend',
            'li',
            'link',
            'main',
            'menu',
            'menuitem',
            'nav',
            'noframes',
            'ol',
            'optgroup',
            'option',
            'p',
            'param',
            'section',
            'source',
            'summary',
            'table',
            'tbody',
            'td',
            'tfoot',
            'th',
            'thead',
            'title',
            'tr',
            'track',
            'ul'
        ];

        return strip_tags($text, implode('', array_map(function ($tag) {
            return '<' . $tag . '>';
        }, $validTags)));
    }

    protected function getParser()
    {
        if ($this->parser === null) {
            $this->parser = new Parsedown;
        }

        return $this->parser;
    }
}
